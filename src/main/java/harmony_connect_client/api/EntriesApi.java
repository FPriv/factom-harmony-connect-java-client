/*
 * Harmony Connect
 * An easy to use API that helps you access the Factom blockchain.
 *
 * OpenAPI spec version: 1.0.17
 * Contact: harmony-support@factom.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package harmony_connect_client.api;

import harmony_connect_client.ApiCallback;
import harmony_connect_client.ApiClient;
import harmony_connect_client.ApiException;
import harmony_connect_client.ApiResponse;
import harmony_connect_client.Configuration;
import harmony_connect_client.Pair;
import harmony_connect_client.ProgressRequestBody;
import harmony_connect_client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import harmony_connect_client.model.Entry;
import harmony_connect_client.model.EntryCreate;
import harmony_connect_client.model.EntryList;
import harmony_connect_client.model.EntrySearchResponse;
import harmony_connect_client.model.EntryShort;
import harmony_connect_client.model.SearchBody;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EntriesApi {
    private ApiClient apiClient;

    public EntriesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EntriesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getEntriesByChainID
     * @param chainId Chain identifier (required)
     * @param limit The number of items you would like back in each page. (optional)
     * @param offset The offset parameter allows you to select which item you would like to start from when you get back a list from Connect. For example, if you&#39;ve already seen the first 15 items and you&#39;d like the next set, you would send an offset of 15. &#x60;offset&#x3D;0&#x60; starts from the first item of the set and is the default position. (optional)
     * @param stages The immutability stages you want to restrict results to. You can choose any from &#x60;replicated&#x60;, &#x60;factom&#x60;, and &#x60;anchored&#x60;. If you would like to search among multiple stages, send them in a comma separated string. For example: &#x60;&#39;replicated,factom&#39;&#x60;. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEntriesByChainIDCall(String chainId, Integer limit, Integer offset, String stages, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/chains/{chain_id}/entries"
            .replaceAll("\\{" + "chain_id" + "\\}", apiClient.escapeString(chainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        }

        if (stages != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("stages", stages));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "AppId", "AppKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEntriesByChainIDValidateBeforeCall(String chainId, Integer limit, Integer offset, String stages, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'chainId' is set
        if (chainId == null) {
            throw new ApiException("Missing the required parameter 'chainId' when calling getEntriesByChainID(Async)");
        }
        

        com.squareup.okhttp.Call call = getEntriesByChainIDCall(chainId, limit, offset, stages, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Chain&#39;s Entries
     * List all entries contained on the specified chain.
     * @param chainId Chain identifier (required)
     * @param limit The number of items you would like back in each page. (optional)
     * @param offset The offset parameter allows you to select which item you would like to start from when you get back a list from Connect. For example, if you&#39;ve already seen the first 15 items and you&#39;d like the next set, you would send an offset of 15. &#x60;offset&#x3D;0&#x60; starts from the first item of the set and is the default position. (optional)
     * @param stages The immutability stages you want to restrict results to. You can choose any from &#x60;replicated&#x60;, &#x60;factom&#x60;, and &#x60;anchored&#x60;. If you would like to search among multiple stages, send them in a comma separated string. For example: &#x60;&#39;replicated,factom&#39;&#x60;. (optional)
     * @return EntryList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EntryList getEntriesByChainID(String chainId, Integer limit, Integer offset, String stages) throws ApiException {
        ApiResponse<EntryList> resp = getEntriesByChainIDWithHttpInfo(chainId, limit, offset, stages);
        return resp.getData();
    }

    /**
     * Get Chain&#39;s Entries
     * List all entries contained on the specified chain.
     * @param chainId Chain identifier (required)
     * @param limit The number of items you would like back in each page. (optional)
     * @param offset The offset parameter allows you to select which item you would like to start from when you get back a list from Connect. For example, if you&#39;ve already seen the first 15 items and you&#39;d like the next set, you would send an offset of 15. &#x60;offset&#x3D;0&#x60; starts from the first item of the set and is the default position. (optional)
     * @param stages The immutability stages you want to restrict results to. You can choose any from &#x60;replicated&#x60;, &#x60;factom&#x60;, and &#x60;anchored&#x60;. If you would like to search among multiple stages, send them in a comma separated string. For example: &#x60;&#39;replicated,factom&#39;&#x60;. (optional)
     * @return ApiResponse&lt;EntryList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EntryList> getEntriesByChainIDWithHttpInfo(String chainId, Integer limit, Integer offset, String stages) throws ApiException {
        com.squareup.okhttp.Call call = getEntriesByChainIDValidateBeforeCall(chainId, limit, offset, stages, null, null);
        Type localVarReturnType = new TypeToken<EntryList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Chain&#39;s Entries (asynchronously)
     * List all entries contained on the specified chain.
     * @param chainId Chain identifier (required)
     * @param limit The number of items you would like back in each page. (optional)
     * @param offset The offset parameter allows you to select which item you would like to start from when you get back a list from Connect. For example, if you&#39;ve already seen the first 15 items and you&#39;d like the next set, you would send an offset of 15. &#x60;offset&#x3D;0&#x60; starts from the first item of the set and is the default position. (optional)
     * @param stages The immutability stages you want to restrict results to. You can choose any from &#x60;replicated&#x60;, &#x60;factom&#x60;, and &#x60;anchored&#x60;. If you would like to search among multiple stages, send them in a comma separated string. For example: &#x60;&#39;replicated,factom&#39;&#x60;. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEntriesByChainIDAsync(String chainId, Integer limit, Integer offset, String stages, final ApiCallback<EntryList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEntriesByChainIDValidateBeforeCall(chainId, limit, offset, stages, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EntryList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEntryByHash
     * @param chainId Chain identifier (required)
     * @param entryHash The SHA256 hash of the entry. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEntryByHashCall(String chainId, String entryHash, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/chains/{chain_id}/entries/{entry_hash}"
            .replaceAll("\\{" + "chain_id" + "\\}", apiClient.escapeString(chainId.toString()))
            .replaceAll("\\{" + "entry_hash" + "\\}", apiClient.escapeString(entryHash.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "AppId", "AppKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEntryByHashValidateBeforeCall(String chainId, String entryHash, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'chainId' is set
        if (chainId == null) {
            throw new ApiException("Missing the required parameter 'chainId' when calling getEntryByHash(Async)");
        }
        
        // verify the required parameter 'entryHash' is set
        if (entryHash == null) {
            throw new ApiException("Missing the required parameter 'entryHash' when calling getEntryByHash(Async)");
        }
        

        com.squareup.okhttp.Call call = getEntryByHashCall(chainId, entryHash, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Entry Info
     * Returns information about a specific entry on Connect. The requested entry must be specified using the Chain ID and Entry Hash.
     * @param chainId Chain identifier (required)
     * @param entryHash The SHA256 hash of the entry. (required)
     * @return Entry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Entry getEntryByHash(String chainId, String entryHash) throws ApiException {
        ApiResponse<Entry> resp = getEntryByHashWithHttpInfo(chainId, entryHash);
        return resp.getData();
    }

    /**
     * Get Entry Info
     * Returns information about a specific entry on Connect. The requested entry must be specified using the Chain ID and Entry Hash.
     * @param chainId Chain identifier (required)
     * @param entryHash The SHA256 hash of the entry. (required)
     * @return ApiResponse&lt;Entry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Entry> getEntryByHashWithHttpInfo(String chainId, String entryHash) throws ApiException {
        com.squareup.okhttp.Call call = getEntryByHashValidateBeforeCall(chainId, entryHash, null, null);
        Type localVarReturnType = new TypeToken<Entry>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Entry Info (asynchronously)
     * Returns information about a specific entry on Connect. The requested entry must be specified using the Chain ID and Entry Hash.
     * @param chainId Chain identifier (required)
     * @param entryHash The SHA256 hash of the entry. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEntryByHashAsync(String chainId, String entryHash, final ApiCallback<Entry> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEntryByHashValidateBeforeCall(chainId, entryHash, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Entry>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFirstEntry
     * @param chainId Chain identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFirstEntryCall(String chainId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/chains/{chain_id}/entries/first"
            .replaceAll("\\{" + "chain_id" + "\\}", apiClient.escapeString(chainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "AppId", "AppKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFirstEntryValidateBeforeCall(String chainId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'chainId' is set
        if (chainId == null) {
            throw new ApiException("Missing the required parameter 'chainId' when calling getFirstEntry(Async)");
        }
        

        com.squareup.okhttp.Call call = getFirstEntryCall(chainId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Chain&#39;s First Entry
     * Retrieve the first entry that has been saved to this chain.
     * @param chainId Chain identifier (required)
     * @return Entry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Entry getFirstEntry(String chainId) throws ApiException {
        ApiResponse<Entry> resp = getFirstEntryWithHttpInfo(chainId);
        return resp.getData();
    }

    /**
     * Get Chain&#39;s First Entry
     * Retrieve the first entry that has been saved to this chain.
     * @param chainId Chain identifier (required)
     * @return ApiResponse&lt;Entry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Entry> getFirstEntryWithHttpInfo(String chainId) throws ApiException {
        com.squareup.okhttp.Call call = getFirstEntryValidateBeforeCall(chainId, null, null);
        Type localVarReturnType = new TypeToken<Entry>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Chain&#39;s First Entry (asynchronously)
     * Retrieve the first entry that has been saved to this chain.
     * @param chainId Chain identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFirstEntryAsync(String chainId, final ApiCallback<Entry> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFirstEntryValidateBeforeCall(chainId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Entry>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getLastEntry
     * @param chainId Chain identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLastEntryCall(String chainId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/chains/{chain_id}/entries/last"
            .replaceAll("\\{" + "chain_id" + "\\}", apiClient.escapeString(chainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "AppId", "AppKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLastEntryValidateBeforeCall(String chainId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'chainId' is set
        if (chainId == null) {
            throw new ApiException("Missing the required parameter 'chainId' when calling getLastEntry(Async)");
        }
        

        com.squareup.okhttp.Call call = getLastEntryCall(chainId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Chain&#39;s Last Entry
     * Retrieve the last entry that has been saved to this chain.
     * @param chainId Chain identifier (required)
     * @return Entry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Entry getLastEntry(String chainId) throws ApiException {
        ApiResponse<Entry> resp = getLastEntryWithHttpInfo(chainId);
        return resp.getData();
    }

    /**
     * Get Chain&#39;s Last Entry
     * Retrieve the last entry that has been saved to this chain.
     * @param chainId Chain identifier (required)
     * @return ApiResponse&lt;Entry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Entry> getLastEntryWithHttpInfo(String chainId) throws ApiException {
        com.squareup.okhttp.Call call = getLastEntryValidateBeforeCall(chainId, null, null);
        Type localVarReturnType = new TypeToken<Entry>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Chain&#39;s Last Entry (asynchronously)
     * Retrieve the last entry that has been saved to this chain.
     * @param chainId Chain identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLastEntryAsync(String chainId, final ApiCallback<Entry> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLastEntryValidateBeforeCall(chainId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Entry>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postEntriesSearch
     * @param chainId Chain identifier (required)
     * @param searchBody  (required)
     * @param limit The number of items you would like back in each page. (optional)
     * @param offset The offset parameter allows you to select which item you would like to start from when you get back a list from Connect. For example, if you&#39;ve already seen the first 15 items and you&#39;d like the next set, you would send an offset of 15. &#x60;offset&#x3D;0&#x60; starts from the first item of the set and is the default position. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postEntriesSearchCall(String chainId, SearchBody searchBody, Integer limit, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = searchBody;

        // create path and map variables
        String localVarPath = "/chains/{chain_id}/entries/search"
            .replaceAll("\\{" + "chain_id" + "\\}", apiClient.escapeString(chainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "AppId", "AppKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postEntriesSearchValidateBeforeCall(String chainId, SearchBody searchBody, Integer limit, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'chainId' is set
        if (chainId == null) {
            throw new ApiException("Missing the required parameter 'chainId' when calling postEntriesSearch(Async)");
        }
        
        // verify the required parameter 'searchBody' is set
        if (searchBody == null) {
            throw new ApiException("Missing the required parameter 'searchBody' when calling postEntriesSearch(Async)");
        }
        

        com.squareup.okhttp.Call call = postEntriesSearchCall(chainId, searchBody, limit, offset, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search Chain&#39;s Entries
     * Find all of the entries within the specified chain that have the requested &#x60;external_ids&#x60;.
     * @param chainId Chain identifier (required)
     * @param searchBody  (required)
     * @param limit The number of items you would like back in each page. (optional)
     * @param offset The offset parameter allows you to select which item you would like to start from when you get back a list from Connect. For example, if you&#39;ve already seen the first 15 items and you&#39;d like the next set, you would send an offset of 15. &#x60;offset&#x3D;0&#x60; starts from the first item of the set and is the default position. (optional)
     * @return EntrySearchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EntrySearchResponse postEntriesSearch(String chainId, SearchBody searchBody, Integer limit, Integer offset) throws ApiException {
        ApiResponse<EntrySearchResponse> resp = postEntriesSearchWithHttpInfo(chainId, searchBody, limit, offset);
        return resp.getData();
    }

    /**
     * Search Chain&#39;s Entries
     * Find all of the entries within the specified chain that have the requested &#x60;external_ids&#x60;.
     * @param chainId Chain identifier (required)
     * @param searchBody  (required)
     * @param limit The number of items you would like back in each page. (optional)
     * @param offset The offset parameter allows you to select which item you would like to start from when you get back a list from Connect. For example, if you&#39;ve already seen the first 15 items and you&#39;d like the next set, you would send an offset of 15. &#x60;offset&#x3D;0&#x60; starts from the first item of the set and is the default position. (optional)
     * @return ApiResponse&lt;EntrySearchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EntrySearchResponse> postEntriesSearchWithHttpInfo(String chainId, SearchBody searchBody, Integer limit, Integer offset) throws ApiException {
        com.squareup.okhttp.Call call = postEntriesSearchValidateBeforeCall(chainId, searchBody, limit, offset, null, null);
        Type localVarReturnType = new TypeToken<EntrySearchResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search Chain&#39;s Entries (asynchronously)
     * Find all of the entries within the specified chain that have the requested &#x60;external_ids&#x60;.
     * @param chainId Chain identifier (required)
     * @param searchBody  (required)
     * @param limit The number of items you would like back in each page. (optional)
     * @param offset The offset parameter allows you to select which item you would like to start from when you get back a list from Connect. For example, if you&#39;ve already seen the first 15 items and you&#39;d like the next set, you would send an offset of 15. &#x60;offset&#x3D;0&#x60; starts from the first item of the set and is the default position. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postEntriesSearchAsync(String chainId, SearchBody searchBody, Integer limit, Integer offset, final ApiCallback<EntrySearchResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postEntriesSearchValidateBeforeCall(chainId, searchBody, limit, offset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EntrySearchResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postEntryToChainID
     * @param chainId Chain identifier (required)
     * @param entryCreate  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postEntryToChainIDCall(String chainId, EntryCreate entryCreate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = entryCreate;

        // create path and map variables
        String localVarPath = "/chains/{chain_id}/entries"
            .replaceAll("\\{" + "chain_id" + "\\}", apiClient.escapeString(chainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "AppId", "AppKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postEntryToChainIDValidateBeforeCall(String chainId, EntryCreate entryCreate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'chainId' is set
        if (chainId == null) {
            throw new ApiException("Missing the required parameter 'chainId' when calling postEntryToChainID(Async)");
        }
        
        // verify the required parameter 'entryCreate' is set
        if (entryCreate == null) {
            throw new ApiException("Missing the required parameter 'entryCreate' when calling postEntryToChainID(Async)");
        }
        

        com.squareup.okhttp.Call call = postEntryToChainIDCall(chainId, entryCreate, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create an Entry
     * Create a new entry for the selected chain. Content and external id must be uploaded in Base64 format.
     * @param chainId Chain identifier (required)
     * @param entryCreate  (required)
     * @return EntryShort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EntryShort postEntryToChainID(String chainId, EntryCreate entryCreate) throws ApiException {
        ApiResponse<EntryShort> resp = postEntryToChainIDWithHttpInfo(chainId, entryCreate);
        return resp.getData();
    }

    /**
     * Create an Entry
     * Create a new entry for the selected chain. Content and external id must be uploaded in Base64 format.
     * @param chainId Chain identifier (required)
     * @param entryCreate  (required)
     * @return ApiResponse&lt;EntryShort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EntryShort> postEntryToChainIDWithHttpInfo(String chainId, EntryCreate entryCreate) throws ApiException {
        com.squareup.okhttp.Call call = postEntryToChainIDValidateBeforeCall(chainId, entryCreate, null, null);
        Type localVarReturnType = new TypeToken<EntryShort>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create an Entry (asynchronously)
     * Create a new entry for the selected chain. Content and external id must be uploaded in Base64 format.
     * @param chainId Chain identifier (required)
     * @param entryCreate  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postEntryToChainIDAsync(String chainId, EntryCreate entryCreate, final ApiCallback<EntryShort> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postEntryToChainIDValidateBeforeCall(chainId, entryCreate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EntryShort>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
