/*
 * Harmony Connect
 * An easy to use API that helps you access the Factom blockchain.
 *
 * OpenAPI spec version: 1.0.19
 * Contact: harmony-support@factom.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package harmony_connect_client.api;

import harmony_connect_client.ApiCallback;
import harmony_connect_client.ApiClient;
import harmony_connect_client.ApiException;
import harmony_connect_client.ApiResponse;
import harmony_connect_client.Configuration;
import harmony_connect_client.Pair;
import harmony_connect_client.ProgressRequestBody;
import harmony_connect_client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import harmony_connect_client.model.ChainShort;
import harmony_connect_client.model.EntryShort;
import harmony_connect_client.model.ErrorMessage;
import harmony_connect_client.model.IdentityChain;
import harmony_connect_client.model.IdentityCreate;
import harmony_connect_client.model.IdentityKey;
import harmony_connect_client.model.IdentityKeyReplace;
import harmony_connect_client.model.KeyList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IdentitiesApi {
    private ApiClient apiClient;

    public IdentitiesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public IdentitiesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getIdChainbyId
     * @param identityChainId The hex encoded string that points to the identity's chain (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getIdChainbyIdCall(String identityChainId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/identities/{identity_chain_id}"
            .replaceAll("\\{" + "identity_chain_id" + "\\}", apiClient.escapeString(identityChainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "AppId", "AppKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getIdChainbyIdValidateBeforeCall(String identityChainId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'identityChainId' is set
        if (identityChainId == null) {
            throw new ApiException("Missing the required parameter 'identityChainId' when calling getIdChainbyId(Async)");
        }
        

        com.squareup.okhttp.Call call = getIdChainbyIdCall(identityChainId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Identity Chain Info
     * Retrieve the details about a particular Identity Chain.
     * @param identityChainId The hex encoded string that points to the identity's chain (required)
     * @return IdentityChain
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IdentityChain getIdChainbyId(String identityChainId) throws ApiException {
        ApiResponse<IdentityChain> resp = getIdChainbyIdWithHttpInfo(identityChainId);
        return resp.getData();
    }

    /**
     * Get Identity Chain Info
     * Retrieve the details about a particular Identity Chain.
     * @param identityChainId The hex encoded string that points to the identity's chain (required)
     * @return ApiResponse&lt;IdentityChain&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IdentityChain> getIdChainbyIdWithHttpInfo(String identityChainId) throws ApiException {
        com.squareup.okhttp.Call call = getIdChainbyIdValidateBeforeCall(identityChainId, null, null);
        Type localVarReturnType = new TypeToken<IdentityChain>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Identity Chain Info (asynchronously)
     * Retrieve the details about a particular Identity Chain.
     * @param identityChainId The hex encoded string that points to the identity's chain (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getIdChainbyIdAsync(String identityChainId, final ApiCallback<IdentityChain> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getIdChainbyIdValidateBeforeCall(identityChainId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IdentityChain>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getKeybyEntryHash
     * @param identityChainId The hex encoded string that points to the identity's chain (required)
     * @param keyString The public key string. Must be in base58 idpub format. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getKeybyEntryHashCall(String identityChainId, String keyString, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/identities/{identity_chain_id}/keys/{key_string}"
            .replaceAll("\\{" + "identity_chain_id" + "\\}", apiClient.escapeString(identityChainId.toString()))
            .replaceAll("\\{" + "key_string" + "\\}", apiClient.escapeString(keyString.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "AppId", "AppKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getKeybyEntryHashValidateBeforeCall(String identityChainId, String keyString, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'identityChainId' is set
        if (identityChainId == null) {
            throw new ApiException("Missing the required parameter 'identityChainId' when calling getKeybyEntryHash(Async)");
        }
        
        // verify the required parameter 'keyString' is set
        if (keyString == null) {
            throw new ApiException("Missing the required parameter 'keyString' when calling getKeybyEntryHash(Async)");
        }
        

        com.squareup.okhttp.Call call = getKeybyEntryHashCall(identityChainId, keyString, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Key Info
     * Retreive information about a specific public key for a given Identity, including the heights at which the key was activated and retired if applicable.
     * @param identityChainId The hex encoded string that points to the identity's chain (required)
     * @param keyString The public key string. Must be in base58 idpub format. (required)
     * @return IdentityKey
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IdentityKey getKeybyEntryHash(String identityChainId, String keyString) throws ApiException {
        ApiResponse<IdentityKey> resp = getKeybyEntryHashWithHttpInfo(identityChainId, keyString);
        return resp.getData();
    }

    /**
     * Get Key Info
     * Retreive information about a specific public key for a given Identity, including the heights at which the key was activated and retired if applicable.
     * @param identityChainId The hex encoded string that points to the identity's chain (required)
     * @param keyString The public key string. Must be in base58 idpub format. (required)
     * @return ApiResponse&lt;IdentityKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IdentityKey> getKeybyEntryHashWithHttpInfo(String identityChainId, String keyString) throws ApiException {
        com.squareup.okhttp.Call call = getKeybyEntryHashValidateBeforeCall(identityChainId, keyString, null, null);
        Type localVarReturnType = new TypeToken<IdentityKey>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Key Info (asynchronously)
     * Retreive information about a specific public key for a given Identity, including the heights at which the key was activated and retired if applicable.
     * @param identityChainId The hex encoded string that points to the identity's chain (required)
     * @param keyString The public key string. Must be in base58 idpub format. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getKeybyEntryHashAsync(String identityChainId, String keyString, final ApiCallback<IdentityKey> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getKeybyEntryHashValidateBeforeCall(identityChainId, keyString, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IdentityKey>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getKeysbyIdChainId
     * @param identityChainId The hex encoded string that points to the identity's chain (required)
     * @param limit The number of items you would like back in each page. (optional)
     * @param offset The offset parameter allows you to select which item you would like to start from when you get back a list from Connect. For example, if you've already seen the first 15 items and you'd like the next set, you would send an offset of 15. &#x60;offset&#x3D;0&#x60; starts from the first item of the set and is the default position. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getKeysbyIdChainIdCall(String identityChainId, Integer limit, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/identities/{identity_chain_id}/keys"
            .replaceAll("\\{" + "identity_chain_id" + "\\}", apiClient.escapeString(identityChainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "AppId", "AppKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getKeysbyIdChainIdValidateBeforeCall(String identityChainId, Integer limit, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'identityChainId' is set
        if (identityChainId == null) {
            throw new ApiException("Missing the required parameter 'identityChainId' when calling getKeysbyIdChainId(Async)");
        }
        

        com.squareup.okhttp.Call call = getKeysbyIdChainIdCall(identityChainId, limit, offset, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Identity Chain's Keys
     * Returns all of the keys, past and present, associated with a particular Identity. Results are paginated and ordered by activation height.
     * @param identityChainId The hex encoded string that points to the identity's chain (required)
     * @param limit The number of items you would like back in each page. (optional)
     * @param offset The offset parameter allows you to select which item you would like to start from when you get back a list from Connect. For example, if you've already seen the first 15 items and you'd like the next set, you would send an offset of 15. &#x60;offset&#x3D;0&#x60; starts from the first item of the set and is the default position. (optional)
     * @return KeyList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public KeyList getKeysbyIdChainId(String identityChainId, Integer limit, Integer offset) throws ApiException {
        ApiResponse<KeyList> resp = getKeysbyIdChainIdWithHttpInfo(identityChainId, limit, offset);
        return resp.getData();
    }

    /**
     * Get Identity Chain's Keys
     * Returns all of the keys, past and present, associated with a particular Identity. Results are paginated and ordered by activation height.
     * @param identityChainId The hex encoded string that points to the identity's chain (required)
     * @param limit The number of items you would like back in each page. (optional)
     * @param offset The offset parameter allows you to select which item you would like to start from when you get back a list from Connect. For example, if you've already seen the first 15 items and you'd like the next set, you would send an offset of 15. &#x60;offset&#x3D;0&#x60; starts from the first item of the set and is the default position. (optional)
     * @return ApiResponse&lt;KeyList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<KeyList> getKeysbyIdChainIdWithHttpInfo(String identityChainId, Integer limit, Integer offset) throws ApiException {
        com.squareup.okhttp.Call call = getKeysbyIdChainIdValidateBeforeCall(identityChainId, limit, offset, null, null);
        Type localVarReturnType = new TypeToken<KeyList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Identity Chain's Keys (asynchronously)
     * Returns all of the keys, past and present, associated with a particular Identity. Results are paginated and ordered by activation height.
     * @param identityChainId The hex encoded string that points to the identity's chain (required)
     * @param limit The number of items you would like back in each page. (optional)
     * @param offset The offset parameter allows you to select which item you would like to start from when you get back a list from Connect. For example, if you've already seen the first 15 items and you'd like the next set, you would send an offset of 15. &#x60;offset&#x3D;0&#x60; starts from the first item of the set and is the default position. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getKeysbyIdChainIdAsync(String identityChainId, Integer limit, Integer offset, final ApiCallback<KeyList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getKeysbyIdChainIdValidateBeforeCall(identityChainId, limit, offset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<KeyList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postIdChain
     * @param identityCreate  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postIdChainCall(IdentityCreate identityCreate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = identityCreate;

        // create path and map variables
        String localVarPath = "/identities";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "AppId", "AppKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postIdChainValidateBeforeCall(IdentityCreate identityCreate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'identityCreate' is set
        if (identityCreate == null) {
            throw new ApiException("Missing the required parameter 'identityCreate' when calling postIdChain(Async)");
        }
        

        com.squareup.okhttp.Call call = postIdChainCall(identityCreate, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create Identity Chain
     * Creates a new identity chain. To create the chain, you'll need to include a unique name array and an array of public keys. If successful, returns information about the chain that was created.
     * @param identityCreate  (required)
     * @return ChainShort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ChainShort postIdChain(IdentityCreate identityCreate) throws ApiException {
        ApiResponse<ChainShort> resp = postIdChainWithHttpInfo(identityCreate);
        return resp.getData();
    }

    /**
     * Create Identity Chain
     * Creates a new identity chain. To create the chain, you'll need to include a unique name array and an array of public keys. If successful, returns information about the chain that was created.
     * @param identityCreate  (required)
     * @return ApiResponse&lt;ChainShort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ChainShort> postIdChainWithHttpInfo(IdentityCreate identityCreate) throws ApiException {
        com.squareup.okhttp.Call call = postIdChainValidateBeforeCall(identityCreate, null, null);
        Type localVarReturnType = new TypeToken<ChainShort>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create Identity Chain (asynchronously)
     * Creates a new identity chain. To create the chain, you'll need to include a unique name array and an array of public keys. If successful, returns information about the chain that was created.
     * @param identityCreate  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postIdChainAsync(IdentityCreate identityCreate, final ApiCallback<ChainShort> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postIdChainValidateBeforeCall(identityCreate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ChainShort>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postKeytoIdChainId
     * @param identityChainId The hex encoded string that points to the identity's chain (required)
     * @param identityKeyReplace  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postKeytoIdChainIdCall(String identityChainId, IdentityKeyReplace identityKeyReplace, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = identityKeyReplace;

        // create path and map variables
        String localVarPath = "/identities/{identity_chain_id}/keys"
            .replaceAll("\\{" + "identity_chain_id" + "\\}", apiClient.escapeString(identityChainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "AppId", "AppKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postKeytoIdChainIdValidateBeforeCall(String identityChainId, IdentityKeyReplace identityKeyReplace, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'identityChainId' is set
        if (identityChainId == null) {
            throw new ApiException("Missing the required parameter 'identityChainId' when calling postKeytoIdChainId(Async)");
        }
        
        // verify the required parameter 'identityKeyReplace' is set
        if (identityKeyReplace == null) {
            throw new ApiException("Missing the required parameter 'identityKeyReplace' when calling postKeytoIdChainId(Async)");
        }
        

        com.squareup.okhttp.Call call = postKeytoIdChainIdCall(identityChainId, identityKeyReplace, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Replace Identity Key
     * Retires an existing key from an identity and replaces it with a new one. To do this, a user must send the key to be replaced (&#x60;old_key&#x60;), the &#x60;new_key&#x60;, the signing key that authorizes the replacement and a signed message from the signing key. The signing key must be either equal to or senior to the key that is being replaced.  *Note: You may not reuse a key. If the &#x60;new_key&#x60; has been used by this Identity at any level, the replacement will fail.*
     * @param identityChainId The hex encoded string that points to the identity's chain (required)
     * @param identityKeyReplace  (required)
     * @return EntryShort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EntryShort postKeytoIdChainId(String identityChainId, IdentityKeyReplace identityKeyReplace) throws ApiException {
        ApiResponse<EntryShort> resp = postKeytoIdChainIdWithHttpInfo(identityChainId, identityKeyReplace);
        return resp.getData();
    }

    /**
     * Replace Identity Key
     * Retires an existing key from an identity and replaces it with a new one. To do this, a user must send the key to be replaced (&#x60;old_key&#x60;), the &#x60;new_key&#x60;, the signing key that authorizes the replacement and a signed message from the signing key. The signing key must be either equal to or senior to the key that is being replaced.  *Note: You may not reuse a key. If the &#x60;new_key&#x60; has been used by this Identity at any level, the replacement will fail.*
     * @param identityChainId The hex encoded string that points to the identity's chain (required)
     * @param identityKeyReplace  (required)
     * @return ApiResponse&lt;EntryShort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EntryShort> postKeytoIdChainIdWithHttpInfo(String identityChainId, IdentityKeyReplace identityKeyReplace) throws ApiException {
        com.squareup.okhttp.Call call = postKeytoIdChainIdValidateBeforeCall(identityChainId, identityKeyReplace, null, null);
        Type localVarReturnType = new TypeToken<EntryShort>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Replace Identity Key (asynchronously)
     * Retires an existing key from an identity and replaces it with a new one. To do this, a user must send the key to be replaced (&#x60;old_key&#x60;), the &#x60;new_key&#x60;, the signing key that authorizes the replacement and a signed message from the signing key. The signing key must be either equal to or senior to the key that is being replaced.  *Note: You may not reuse a key. If the &#x60;new_key&#x60; has been used by this Identity at any level, the replacement will fail.*
     * @param identityChainId The hex encoded string that points to the identity's chain (required)
     * @param identityKeyReplace  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postKeytoIdChainIdAsync(String identityChainId, IdentityKeyReplace identityKeyReplace, final ApiCallback<EntryShort> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postKeytoIdChainIdValidateBeforeCall(identityChainId, identityKeyReplace, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EntryShort>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
