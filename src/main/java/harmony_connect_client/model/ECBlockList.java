/*
 * Harmony Connect
 * An easy to use API that helps you access the Factom blockchain.
 *
 * OpenAPI spec version: 1.0.19
 * Contact: harmony-support@factom.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package harmony_connect_client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import harmony_connect_client.model.ECBlockShort;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * ECBlockList
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2019-07-03T22:54:40.268681300Z[UTC]")
public class ECBlockList {
  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private List<ECBlockShort> data = new ArrayList<ECBlockShort>();

  public static final String SERIALIZED_NAME_OFFSET = "offset";
  @SerializedName(SERIALIZED_NAME_OFFSET)
  private Integer offset;

  public static final String SERIALIZED_NAME_LIMIT = "limit";
  @SerializedName(SERIALIZED_NAME_LIMIT)
  private Integer limit;

  public static final String SERIALIZED_NAME_COUNT = "count";
  @SerializedName(SERIALIZED_NAME_COUNT)
  private Integer count;

  public ECBlockList data(List<ECBlockShort> data) {
    this.data = data;
    return this;
  }

  public ECBlockList addDataItem(ECBlockShort dataItem) {
    this.data.add(dataItem);
    return this;
  }

   /**
   * The entry credit blocks returned in this set.
   * @return data
  **/
  @ApiModelProperty(required = true, value = "The entry credit blocks returned in this set.")
  public List<ECBlockShort> getData() {
    return data;
  }

  public void setData(List<ECBlockShort> data) {
    this.data = data;
  }

  public ECBlockList offset(Integer offset) {
    this.offset = offset;
    return this;
  }

   /**
   * The index of the first block returned from the total set (Starting from 0).
   * @return offset
  **/
  @ApiModelProperty(required = true, value = "The index of the first block returned from the total set (Starting from 0).")
  public Integer getOffset() {
    return offset;
  }

  public void setOffset(Integer offset) {
    this.offset = offset;
  }

  public ECBlockList limit(Integer limit) {
    this.limit = limit;
    return this;
  }

   /**
   * The number of blocks returned per page.
   * @return limit
  **/
  @ApiModelProperty(required = true, value = "The number of blocks returned per page.")
  public Integer getLimit() {
    return limit;
  }

  public void setLimit(Integer limit) {
    this.limit = limit;
  }

  public ECBlockList count(Integer count) {
    this.count = count;
    return this;
  }

   /**
   * The total number of blocks seen.
   * @return count
  **/
  @ApiModelProperty(required = true, value = "The total number of blocks seen.")
  public Integer getCount() {
    return count;
  }

  public void setCount(Integer count) {
    this.count = count;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ECBlockList ecBlockList = (ECBlockList) o;
    return Objects.equals(this.data, ecBlockList.data) &&
        Objects.equals(this.offset, ecBlockList.offset) &&
        Objects.equals(this.limit, ecBlockList.limit) &&
        Objects.equals(this.count, ecBlockList.count);
  }

  @Override
  public int hashCode() {
    return Objects.hash(data, offset, limit, count);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ECBlockList {\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    offset: ").append(toIndentedString(offset)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

