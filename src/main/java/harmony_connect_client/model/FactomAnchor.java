/*
 * Harmony Connect
 * An easy to use API that helps you access the Factom blockchain.
 *
 * OpenAPI spec version: 1.0.19
 * Contact: harmony-support@factom.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package harmony_connect_client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import harmony_connect_client.model.DBlockLink;
import harmony_connect_client.model.MerkleNode;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * FactomAnchor
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2019-07-03T22:54:40.268681300Z[UTC]")
public class FactomAnchor {
  /**
   * Indicates the blockchain network that contains this anchor.
   */
  @JsonAdapter(NetworkEnum.Adapter.class)
  public enum NetworkEnum {
    BITCOIN("bitcoin"),
    
    ETHEREUM("ethereum"),
    
    FACTOM("factom");

    private String value;

    NetworkEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NetworkEnum fromValue(String text) {
      for (NetworkEnum b : NetworkEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + text + "'");
    }

    public static class Adapter extends TypeAdapter<NetworkEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NetworkEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NetworkEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return NetworkEnum.fromValue(String.valueOf(value));
      }
    }
  }

  public static final String SERIALIZED_NAME_NETWORK = "network";
  @SerializedName(SERIALIZED_NAME_NETWORK)
  private NetworkEnum network;

  /**
   * The confirmation status of the anchor. Either pending or confirmed.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    PENDING("pending"),
    
    CONFIRMED("confirmed");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + text + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StatusEnum.fromValue(String.valueOf(value));
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_ENTRY_SERIALIZED = "entry_serialized";
  @SerializedName(SERIALIZED_NAME_ENTRY_SERIALIZED)
  private String entrySerialized;

  public static final String SERIALIZED_NAME_ENTRY_HASH = "entry_hash";
  @SerializedName(SERIALIZED_NAME_ENTRY_HASH)
  private String entryHash;

  public static final String SERIALIZED_NAME_DBLOCK = "dblock";
  @SerializedName(SERIALIZED_NAME_DBLOCK)
  private DBlockLink dblock = null;

  public static final String SERIALIZED_NAME_MERKLE_BRANCH = "merkle_branch";
  @SerializedName(SERIALIZED_NAME_MERKLE_BRANCH)
  private List<MerkleNode> merkleBranch = new ArrayList<MerkleNode>();

  public FactomAnchor network(NetworkEnum network) {
    this.network = network;
    return this;
  }

   /**
   * Indicates the blockchain network that contains this anchor.
   * @return network
  **/
  @ApiModelProperty(required = true, value = "Indicates the blockchain network that contains this anchor.")
  public NetworkEnum getNetwork() {
    return network;
  }

  public void setNetwork(NetworkEnum network) {
    this.network = network;
  }

  public FactomAnchor status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * The confirmation status of the anchor. Either pending or confirmed.
   * @return status
  **/
  @ApiModelProperty(required = true, value = "The confirmation status of the anchor. Either pending or confirmed.")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public FactomAnchor createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

   /**
   * The time at which this entry was created. Sent in [ISO 8601 Format](https://en.wikipedia.org/wiki/ISO_8601). For example: &#x60;YYYY-MM-DDThh:mm:ss.ssssssZ&#x60; This will be null if the chain is not at least at the &#x60;factom&#x60; immutability stage.
   * @return createdAt
  **/
  @ApiModelProperty(value = "The time at which this entry was created. Sent in [ISO 8601 Format](https://en.wikipedia.org/wiki/ISO_8601). For example: `YYYY-MM-DDThh:mm:ss.ssssssZ` This will be null if the chain is not at least at the `factom` immutability stage.")
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }

  public FactomAnchor entrySerialized(String entrySerialized) {
    this.entrySerialized = entrySerialized;
    return this;
  }

   /**
   * The raw data that makes up the entry.
   * @return entrySerialized
  **/
  @ApiModelProperty(value = "The raw data that makes up the entry.")
  public String getEntrySerialized() {
    return entrySerialized;
  }

  public void setEntrySerialized(String entrySerialized) {
    this.entrySerialized = entrySerialized;
  }

  public FactomAnchor entryHash(String entryHash) {
    this.entryHash = entryHash;
    return this;
  }

   /**
   * The unique identitfier of the entry.
   * @return entryHash
  **/
  @ApiModelProperty(value = "The unique identitfier of the entry.")
  public String getEntryHash() {
    return entryHash;
  }

  public void setEntryHash(String entryHash) {
    this.entryHash = entryHash;
  }

  public FactomAnchor dblock(DBlockLink dblock) {
    this.dblock = dblock;
    return this;
  }

   /**
   * Get dblock
   * @return dblock
  **/
  @ApiModelProperty(value = "")
  public DBlockLink getDblock() {
    return dblock;
  }

  public void setDblock(DBlockLink dblock) {
    this.dblock = dblock;
  }

  public FactomAnchor merkleBranch(List<MerkleNode> merkleBranch) {
    this.merkleBranch = merkleBranch;
    return this;
  }

  public FactomAnchor addMerkleBranchItem(MerkleNode merkleBranchItem) {
    if (this.merkleBranch == null) {
      this.merkleBranch = new ArrayList<MerkleNode>();
    }
    this.merkleBranch.add(merkleBranchItem);
    return this;
  }

   /**
   * The branch of the merkle tree that represents this anchor. Presented as an array of Merkle nodes.
   * @return merkleBranch
  **/
  @ApiModelProperty(value = "The branch of the merkle tree that represents this anchor. Presented as an array of Merkle nodes.")
  public List<MerkleNode> getMerkleBranch() {
    return merkleBranch;
  }

  public void setMerkleBranch(List<MerkleNode> merkleBranch) {
    this.merkleBranch = merkleBranch;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FactomAnchor factomAnchor = (FactomAnchor) o;
    return Objects.equals(this.network, factomAnchor.network) &&
        Objects.equals(this.status, factomAnchor.status) &&
        Objects.equals(this.createdAt, factomAnchor.createdAt) &&
        Objects.equals(this.entrySerialized, factomAnchor.entrySerialized) &&
        Objects.equals(this.entryHash, factomAnchor.entryHash) &&
        Objects.equals(this.dblock, factomAnchor.dblock) &&
        Objects.equals(this.merkleBranch, factomAnchor.merkleBranch);
  }

  @Override
  public int hashCode() {
    return Objects.hash(network, status, createdAt, entrySerialized, entryHash, dblock, merkleBranch);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FactomAnchor {\n");
    sb.append("    network: ").append(toIndentedString(network)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    entrySerialized: ").append(toIndentedString(entrySerialized)).append("\n");
    sb.append("    entryHash: ").append(toIndentedString(entryHash)).append("\n");
    sb.append("    dblock: ").append(toIndentedString(dblock)).append("\n");
    sb.append("    merkleBranch: ").append(toIndentedString(merkleBranch)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

