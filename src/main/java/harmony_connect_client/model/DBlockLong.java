/*
 * Harmony Connect
 * An easy to use API that helps you access the Factom blockchain.
 *
 * OpenAPI spec version: 1.0.19
 * Contact: harmony-support@factom.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package harmony_connect_client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import harmony_connect_client.model.DBlockLongAblock;
import harmony_connect_client.model.DBlockLongBtcAnchorEntry;
import harmony_connect_client.model.DBlockLongEblocks;
import harmony_connect_client.model.DBlockLongEcblock;
import harmony_connect_client.model.DBlockLongFblock;
import harmony_connect_client.model.DBlockLongNext;
import harmony_connect_client.model.DBlockLongPrev;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * A single Directory block from the factom blockchain.
 */
@ApiModel(description = "A single Directory block from the factom blockchain.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2019-07-03T22:54:40.268681300Z[UTC]")
public class DBlockLong {
  public static final String SERIALIZED_NAME_HEIGHT = "height";
  @SerializedName(SERIALIZED_NAME_HEIGHT)
  private String height;

  public static final String SERIALIZED_NAME_STARTED_AT = "started_at";
  @SerializedName(SERIALIZED_NAME_STARTED_AT)
  private String startedAt;

  public static final String SERIALIZED_NAME_KEYMR = "keymr";
  @SerializedName(SERIALIZED_NAME_KEYMR)
  private List<String> keymr = new ArrayList<String>();

  public static final String SERIALIZED_NAME_BTC_ANCHOR_ENTRY = "btc_anchor_entry";
  @SerializedName(SERIALIZED_NAME_BTC_ANCHOR_ENTRY)
  private DBlockLongBtcAnchorEntry btcAnchorEntry = null;

  public static final String SERIALIZED_NAME_BTC_BLOCK_HASH = "btc_block_hash";
  @SerializedName(SERIALIZED_NAME_BTC_BLOCK_HASH)
  private String btcBlockHash;

  public static final String SERIALIZED_NAME_BTC_TRANSACTION = "btc_transaction";
  @SerializedName(SERIALIZED_NAME_BTC_TRANSACTION)
  private String btcTransaction;

  public static final String SERIALIZED_NAME_PREV = "prev";
  @SerializedName(SERIALIZED_NAME_PREV)
  private DBlockLongPrev prev = null;

  public static final String SERIALIZED_NAME_NEXT = "next";
  @SerializedName(SERIALIZED_NAME_NEXT)
  private DBlockLongNext next = null;

  public static final String SERIALIZED_NAME_ABLOCK = "ablock";
  @SerializedName(SERIALIZED_NAME_ABLOCK)
  private DBlockLongAblock ablock = null;

  public static final String SERIALIZED_NAME_ECBLOCK = "ecblock";
  @SerializedName(SERIALIZED_NAME_ECBLOCK)
  private DBlockLongEcblock ecblock = null;

  public static final String SERIALIZED_NAME_FBLOCK = "fblock";
  @SerializedName(SERIALIZED_NAME_FBLOCK)
  private DBlockLongFblock fblock = null;

  public static final String SERIALIZED_NAME_EBLOCKS = "eblocks";
  @SerializedName(SERIALIZED_NAME_EBLOCKS)
  private List<DBlockLongEblocks> eblocks = new ArrayList<DBlockLongEblocks>();

  public DBlockLong height(String height) {
    this.height = height;
    return this;
  }

   /**
   * The height of a directory block indicates how many blocks were created before this block. This is used to identify blocks in the blockchain.
   * @return height
  **/
  @ApiModelProperty(value = "The height of a directory block indicates how many blocks were created before this block. This is used to identify blocks in the blockchain.")
  public String getHeight() {
    return height;
  }

  public void setHeight(String height) {
    this.height = height;
  }

  public DBlockLong startedAt(String startedAt) {
    this.startedAt = startedAt;
    return this;
  }

   /**
   * The timestamp for when this block was built. Sent in [ISO 8601 Format](https://en.wikipedia.org/wiki/ISO_8601). For example: &#x60;YYYY-MM-DDThh:mm:ssZ&#x60;
   * @return startedAt
  **/
  @ApiModelProperty(value = "The timestamp for when this block was built. Sent in [ISO 8601 Format](https://en.wikipedia.org/wiki/ISO_8601). For example: `YYYY-MM-DDThh:mm:ssZ`")
  public String getStartedAt() {
    return startedAt;
  }

  public void setStartedAt(String startedAt) {
    this.startedAt = startedAt;
  }

  public DBlockLong keymr(List<String> keymr) {
    this.keymr = keymr;
    return this;
  }

  public DBlockLong addKeymrItem(String keymrItem) {
    if (this.keymr == null) {
      this.keymr = new ArrayList<String>();
    }
    this.keymr.add(keymrItem);
    return this;
  }

   /**
   * The Key Merkle Root for this block.
   * @return keymr
  **/
  @ApiModelProperty(value = "The Key Merkle Root for this block.")
  public List<String> getKeymr() {
    return keymr;
  }

  public void setKeymr(List<String> keymr) {
    this.keymr = keymr;
  }

  public DBlockLong btcAnchorEntry(DBlockLongBtcAnchorEntry btcAnchorEntry) {
    this.btcAnchorEntry = btcAnchorEntry;
    return this;
  }

   /**
   * Get btcAnchorEntry
   * @return btcAnchorEntry
  **/
  @ApiModelProperty(value = "")
  public DBlockLongBtcAnchorEntry getBtcAnchorEntry() {
    return btcAnchorEntry;
  }

  public void setBtcAnchorEntry(DBlockLongBtcAnchorEntry btcAnchorEntry) {
    this.btcAnchorEntry = btcAnchorEntry;
  }

  public DBlockLong btcBlockHash(String btcBlockHash) {
    this.btcBlockHash = btcBlockHash;
    return this;
  }

   /**
   * The bitcoin block hash for the bitcoin anchor that matches this directory block.
   * @return btcBlockHash
  **/
  @ApiModelProperty(value = "The bitcoin block hash for the bitcoin anchor that matches this directory block.")
  public String getBtcBlockHash() {
    return btcBlockHash;
  }

  public void setBtcBlockHash(String btcBlockHash) {
    this.btcBlockHash = btcBlockHash;
  }

  public DBlockLong btcTransaction(String btcTransaction) {
    this.btcTransaction = btcTransaction;
    return this;
  }

   /**
   * The bitcoin transaction ID for the transaction that includes the anchor message.
   * @return btcTransaction
  **/
  @ApiModelProperty(value = "The bitcoin transaction ID for the transaction that includes the anchor message.")
  public String getBtcTransaction() {
    return btcTransaction;
  }

  public void setBtcTransaction(String btcTransaction) {
    this.btcTransaction = btcTransaction;
  }

  public DBlockLong prev(DBlockLongPrev prev) {
    this.prev = prev;
    return this;
  }

   /**
   * Get prev
   * @return prev
  **/
  @ApiModelProperty(value = "")
  public DBlockLongPrev getPrev() {
    return prev;
  }

  public void setPrev(DBlockLongPrev prev) {
    this.prev = prev;
  }

  public DBlockLong next(DBlockLongNext next) {
    this.next = next;
    return this;
  }

   /**
   * Get next
   * @return next
  **/
  @ApiModelProperty(value = "")
  public DBlockLongNext getNext() {
    return next;
  }

  public void setNext(DBlockLongNext next) {
    this.next = next;
  }

  public DBlockLong ablock(DBlockLongAblock ablock) {
    this.ablock = ablock;
    return this;
  }

   /**
   * Get ablock
   * @return ablock
  **/
  @ApiModelProperty(value = "")
  public DBlockLongAblock getAblock() {
    return ablock;
  }

  public void setAblock(DBlockLongAblock ablock) {
    this.ablock = ablock;
  }

  public DBlockLong ecblock(DBlockLongEcblock ecblock) {
    this.ecblock = ecblock;
    return this;
  }

   /**
   * Get ecblock
   * @return ecblock
  **/
  @ApiModelProperty(value = "")
  public DBlockLongEcblock getEcblock() {
    return ecblock;
  }

  public void setEcblock(DBlockLongEcblock ecblock) {
    this.ecblock = ecblock;
  }

  public DBlockLong fblock(DBlockLongFblock fblock) {
    this.fblock = fblock;
    return this;
  }

   /**
   * Get fblock
   * @return fblock
  **/
  @ApiModelProperty(value = "")
  public DBlockLongFblock getFblock() {
    return fblock;
  }

  public void setFblock(DBlockLongFblock fblock) {
    this.fblock = fblock;
  }

  public DBlockLong eblocks(List<DBlockLongEblocks> eblocks) {
    this.eblocks = eblocks;
    return this;
  }

  public DBlockLong addEblocksItem(DBlockLongEblocks eblocksItem) {
    if (this.eblocks == null) {
      this.eblocks = new ArrayList<DBlockLongEblocks>();
    }
    this.eblocks.add(eblocksItem);
    return this;
  }

   /**
   * The entry blocks contained in this directory block.
   * @return eblocks
  **/
  @ApiModelProperty(value = "The entry blocks contained in this directory block.")
  public List<DBlockLongEblocks> getEblocks() {
    return eblocks;
  }

  public void setEblocks(List<DBlockLongEblocks> eblocks) {
    this.eblocks = eblocks;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DBlockLong dblockLong = (DBlockLong) o;
    return Objects.equals(this.height, dblockLong.height) &&
        Objects.equals(this.startedAt, dblockLong.startedAt) &&
        Objects.equals(this.keymr, dblockLong.keymr) &&
        Objects.equals(this.btcAnchorEntry, dblockLong.btcAnchorEntry) &&
        Objects.equals(this.btcBlockHash, dblockLong.btcBlockHash) &&
        Objects.equals(this.btcTransaction, dblockLong.btcTransaction) &&
        Objects.equals(this.prev, dblockLong.prev) &&
        Objects.equals(this.next, dblockLong.next) &&
        Objects.equals(this.ablock, dblockLong.ablock) &&
        Objects.equals(this.ecblock, dblockLong.ecblock) &&
        Objects.equals(this.fblock, dblockLong.fblock) &&
        Objects.equals(this.eblocks, dblockLong.eblocks);
  }

  @Override
  public int hashCode() {
    return Objects.hash(height, startedAt, keymr, btcAnchorEntry, btcBlockHash, btcTransaction, prev, next, ablock, ecblock, fblock, eblocks);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DBlockLong {\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    startedAt: ").append(toIndentedString(startedAt)).append("\n");
    sb.append("    keymr: ").append(toIndentedString(keymr)).append("\n");
    sb.append("    btcAnchorEntry: ").append(toIndentedString(btcAnchorEntry)).append("\n");
    sb.append("    btcBlockHash: ").append(toIndentedString(btcBlockHash)).append("\n");
    sb.append("    btcTransaction: ").append(toIndentedString(btcTransaction)).append("\n");
    sb.append("    prev: ").append(toIndentedString(prev)).append("\n");
    sb.append("    next: ").append(toIndentedString(next)).append("\n");
    sb.append("    ablock: ").append(toIndentedString(ablock)).append("\n");
    sb.append("    ecblock: ").append(toIndentedString(ecblock)).append("\n");
    sb.append("    fblock: ").append(toIndentedString(fblock)).append("\n");
    sb.append("    eblocks: ").append(toIndentedString(eblocks)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

