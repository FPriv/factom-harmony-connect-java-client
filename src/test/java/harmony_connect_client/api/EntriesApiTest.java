/*
 * Harmony Connect
 * An easy to use API that helps you access the Factom blockchain.
 *
 * OpenAPI spec version: 1.0.17
 * Contact: harmony-support@factom.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package harmony_connect_client.api;

import harmony_connect_client.ApiException;
import harmony_connect_client.model.Entry;
import harmony_connect_client.model.EntryCreate;
import harmony_connect_client.model.EntryList;
import harmony_connect_client.model.EntrySearchResponse;
import harmony_connect_client.model.EntryShort;
import harmony_connect_client.model.SearchBody;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for EntriesApi
 */
@Ignore
public class EntriesApiTest {

    private final EntriesApi api = new EntriesApi();

    
    /**
     * Get Chain&#39;s Entries
     *
     * List all entries contained on the specified chain.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEntriesByChainIDTest() throws ApiException {
        String chainId = null;
        Integer limit = null;
        Integer offset = null;
        String stages = null;
        EntryList response = api.getEntriesByChainID(chainId, limit, offset, stages);

        // TODO: test validations
    }
    
    /**
     * Get Entry Info
     *
     * Returns information about a specific entry on Connect. The requested entry must be specified using the Chain ID and Entry Hash.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEntryByHashTest() throws ApiException {
        String chainId = null;
        String entryHash = null;
        Entry response = api.getEntryByHash(chainId, entryHash);

        // TODO: test validations
    }
    
    /**
     * Get Chain&#39;s First Entry
     *
     * Retrieve the first entry that has been saved to this chain.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFirstEntryTest() throws ApiException {
        String chainId = null;
        Entry response = api.getFirstEntry(chainId);

        // TODO: test validations
    }
    
    /**
     * Get Chain&#39;s Last Entry
     *
     * Retrieve the last entry that has been saved to this chain.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLastEntryTest() throws ApiException {
        String chainId = null;
        Entry response = api.getLastEntry(chainId);

        // TODO: test validations
    }
    
    /**
     * Search Chain&#39;s Entries
     *
     * Find all of the entries within the specified chain that have the requested &#x60;external_ids&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postEntriesSearchTest() throws ApiException {
        String chainId = null;
        SearchBody searchBody = null;
        Integer limit = null;
        Integer offset = null;
        EntrySearchResponse response = api.postEntriesSearch(chainId, searchBody, limit, offset);

        // TODO: test validations
    }
    
    /**
     * Create an Entry
     *
     * Create a new entry for the selected chain. Content and external id must be uploaded in Base64 format.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postEntryToChainIDTest() throws ApiException {
        String chainId = null;
        EntryCreate entryCreate = null;
        EntryShort response = api.postEntryToChainID(chainId, entryCreate);

        // TODO: test validations
    }
    
}
